pipeline {
    agent any

    environment {
        // Define Docker Hub credentials
        DOCKER_HUB_USER = 'wahaduzzaman'
        DOCKER_HUB_EMAIL = 'wahid08034@gmail.com'
        DOCKER_IMAGE = "php-app:${env.BUILD_NUMBER}" // Dynamic image tag using build number
    }

    stages {
        stage('Checkout') {
            steps {
                // Clone PHP application code from the repository
                checkout scm
            }
        }

        stage('Build PHP Application') {
            steps {
                script {
                    // Run PHP unit tests or linting (optional)
                    sh '''
                    echo "Running PHP tests..."
                    # Replace the following line with actual PHP commands like composer install, phpunit, etc.
                    php --version
                    '''
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    // Build the Docker image for the PHP app
                    sh "docker build -t ${DOCKER_HUB_USER}/${DOCKER_IMAGE} ."
                }
            }
        }

        stage('Login to Docker Hub') {
            steps {
                script {
                    // Log in to Docker Hub
                    withCredentials([usernamePassword(credentialsId: 'docker-hub-credentials', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                        sh "echo ${PASSWORD} | docker login -u ${USERNAME} --password-stdin"
                    }
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                script {
                    // Push the built Docker image to Docker Hub
                    sh "docker push ${DOCKER_HUB_USER}/${DOCKER_IMAGE}"
                }
            }
        }

        stage('Cleanup') {
            steps {
                script {
                    // Clean up Docker resources
                    sh "docker rmi ${DOCKER_HUB_USER}/${DOCKER_IMAGE}"
                }
            }
        }
    }

    post {
        always {
            // Notify the status and clean up workspace
            echo "Pipeline completed!"
            cleanWs()
        }
    }
}
